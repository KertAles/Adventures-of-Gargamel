// Generated by gencpp from file exercise6/Ring.msg
// DO NOT EDIT!


#ifndef EXERCISE6_MESSAGE_RING_H
#define EXERCISE6_MESSAGE_RING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exercise6
{
template <class ContainerAllocator>
struct Ring_
{
  typedef Ring_<ContainerAllocator> Type;

  Ring_()
    : color()
    , app_x(0.0)
    , app_y(0.0)
    , app_z(0.0)  {
    }
  Ring_(const ContainerAllocator& _alloc)
    : color(_alloc)
    , app_x(0.0)
    , app_y(0.0)
    , app_z(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_type;
  _color_type color;

   typedef double _app_x_type;
  _app_x_type app_x;

   typedef double _app_y_type;
  _app_y_type app_y;

   typedef double _app_z_type;
  _app_z_type app_z;





  typedef boost::shared_ptr< ::exercise6::Ring_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exercise6::Ring_<ContainerAllocator> const> ConstPtr;

}; // struct Ring_

typedef ::exercise6::Ring_<std::allocator<void> > Ring;

typedef boost::shared_ptr< ::exercise6::Ring > RingPtr;
typedef boost::shared_ptr< ::exercise6::Ring const> RingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exercise6::Ring_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exercise6::Ring_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exercise6

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'exercise6': ['/home/avrelij/Documents/RINS/catkin_ws/src/exercise6/msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::exercise6::Ring_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise6::Ring_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise6::Ring_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise6::Ring_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise6::Ring_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise6::Ring_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exercise6::Ring_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63915ba74a2bfae4d77cf9f3f4b83726";
  }

  static const char* value(const ::exercise6::Ring_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63915ba74a2bfae4ULL;
  static const uint64_t static_value2 = 0xd77cf9f3f4b83726ULL;
};

template<class ContainerAllocator>
struct DataType< ::exercise6::Ring_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exercise6/Ring";
  }

  static const char* value(const ::exercise6::Ring_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exercise6::Ring_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string color\n\
float64 app_x\n\
float64 app_y\n\
float64 app_z\n\
";
  }

  static const char* value(const ::exercise6::Ring_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exercise6::Ring_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.app_x);
      stream.next(m.app_y);
      stream.next(m.app_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ring_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exercise6::Ring_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exercise6::Ring_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color);
    s << indent << "app_x: ";
    Printer<double>::stream(s, indent + "  ", v.app_x);
    s << indent << "app_y: ";
    Printer<double>::stream(s, indent + "  ", v.app_y);
    s << indent << "app_z: ";
    Printer<double>::stream(s, indent + "  ", v.app_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXERCISE6_MESSAGE_RING_H
