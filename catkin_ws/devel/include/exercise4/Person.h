// Generated by gencpp from file exercise4/Person.msg
// DO NOT EDIT!


#ifndef EXERCISE4_MESSAGE_PERSON_H
#define EXERCISE4_MESSAGE_PERSON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exercise4
{
template <class ContainerAllocator>
struct Person_
{
  typedef Person_<ContainerAllocator> Type;

  Person_()
    : id(0)
    , app_x(0.0)
    , app_y(0.0)
    , app_z(0.0)
    , hair_col()
    , hair_len()  {
    }
  Person_(const ContainerAllocator& _alloc)
    : id(0)
    , app_x(0.0)
    , app_y(0.0)
    , app_z(0.0)
    , hair_col(_alloc)
    , hair_len(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef double _app_x_type;
  _app_x_type app_x;

   typedef double _app_y_type;
  _app_y_type app_y;

   typedef double _app_z_type;
  _app_z_type app_z;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hair_col_type;
  _hair_col_type hair_col;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hair_len_type;
  _hair_len_type hair_len;





  typedef boost::shared_ptr< ::exercise4::Person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exercise4::Person_<ContainerAllocator> const> ConstPtr;

}; // struct Person_

typedef ::exercise4::Person_<std::allocator<void> > Person;

typedef boost::shared_ptr< ::exercise4::Person > PersonPtr;
typedef boost::shared_ptr< ::exercise4::Person const> PersonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exercise4::Person_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exercise4::Person_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exercise4

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'exercise4': ['/home/avrelij/Documents/RINS/catkin_ws/src/exercise4/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::exercise4::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise4::Person_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise4::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise4::Person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise4::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise4::Person_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exercise4::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cad3912a48d80acec18d17fde7286bc";
  }

  static const char* value(const ::exercise4::Person_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cad3912a48d80acULL;
  static const uint64_t static_value2 = 0xec18d17fde7286bcULL;
};

template<class ContainerAllocator>
struct DataType< ::exercise4::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exercise4/Person";
  }

  static const char* value(const ::exercise4::Person_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exercise4::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 id\n\
float64 app_x\n\
float64 app_y\n\
float64 app_z\n\
string hair_col\n\
string hair_len\n\
";
  }

  static const char* value(const ::exercise4::Person_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exercise4::Person_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.app_x);
      stream.next(m.app_y);
      stream.next(m.app_z);
      stream.next(m.hair_col);
      stream.next(m.hair_len);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Person_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exercise4::Person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exercise4::Person_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "app_x: ";
    Printer<double>::stream(s, indent + "  ", v.app_x);
    s << indent << "app_y: ";
    Printer<double>::stream(s, indent + "  ", v.app_y);
    s << indent << "app_z: ";
    Printer<double>::stream(s, indent + "  ", v.app_z);
    s << indent << "hair_col: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hair_col);
    s << indent << "hair_len: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hair_len);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXERCISE4_MESSAGE_PERSON_H
